df
df <- data.frame( var1 = c( 1,2,1),
var2 = c(2,3,2))
df
# rename() 이름변경
df <- rename ( df, v1 = var1, v2 = var2 )
df
생변수 추가
df$sum <- df$v1 + dv$v2
df
# 파생변수 추가
df$sum <- df$v1 + df$v2
df
df [ 2, 1 ] <- 5
df
df <- data.frame( id = c( 1, 2, 3, 4, 5, 6 ),
class = c(1, 1, 1, 1, 2, 2),
math = c(50, 60, 45, 30, 25, 50),
english = c(98, 97, 86, 98, 80, 89),
science = c(50, 60, 78, 58, 65, 98) )
df
df %>% filter(class == 1 )
df %>% filter( class == 2 )
df %>% filter(class != 1)
df %>% filter(class != 2)
df %>% filter(class == 1)
df %>% filter(class == 2)
df %>% filter(class != 1)
df %>% filter(class != 2)
df %>% filter(science > 70)
df %>% filter(math < 50)
df %>% filter( math >= 50 | english >= 90 )
df %>% filter( class %in% c(1, 3, 5) )
df
class1 <- df %>% filter( class == 1 )
class2 <- df %>% filter( class == 2 )
class1
class2
class1 <- df %>% filter( class == 1 )
class2 <- df %>% filter( class == 2 )
class1
class2
# select() : 변수 추출
df %>% select( match )
df
library(dplyr)
df %>% select( match )
df %>% select( science )
# select() : 변수 추출
df %>% select( math )
df %>% select( -math)
df %>% select( -math)
df %>% select( class, math, science )
df %>%
select( id, science ) %>%
head
df %>%
filter( class == 1 ) %>%
select( science )
df %>%
select( id, science ) %>%
sum
df %>%
select( id, science ) %>%
max
df
# arrange() : 정렬
df %>%arrange ( science )
df %>%arrange ( desc(science) )
df %>%
mutate( grade = ifelse( science >= 60, 'pass', 'fail')) %>%
head
df %>%
mutate( total = math + english + science ) %>%
head
df %>%
mutate( total = math + english + science, average = (math + english + science)/3 ) %>%
head
df %>%
mutate( grade = ifelse( science >= 60, 'pass', 'fail')) %>%
head
df %>%
mutate( total = math + english + science, average = (math + english + science)/3 ) %>%
mutate( grade = ifelse( science >= 90, 'pass', ifelse( average < 60, 'fail', 'normal'))) %>%
head
df %>%
mutate( total = math + english + science, average = (math + english + science)/3 ) %>%
arrange( desc( average )) %>%
head
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
install.packages("VIM")
df %>%
mutate( total = math + science + english, average = (math + science + english)/3 ) %>%
arrange( desc( average )) %>%
head
library(dplyr)
df %>%
mutate( total = math + english + science, average = (math + english + science)/3 ) %>%
arrange( desc( average )) %>%
head
df.sort <- df %>%
mutate( total = math + english + science, average = (math + english + science)/3 ) %>%
arrange( desc( average ))
head(df.sort)
head(df)
df %>% summarise( mean_math = mean( math ) )
df %>%
group_by (class) %>%
summarise( mean_math = mean( math ),
mean_english = mean( english ),
mean_science = mean( science ),
n = n() )
df %>% summarise( mean_math = mean( math ) )
df %>%
group_by (class) %>%
summarise( mean_math = mean( math ),
mean_english = mean( english ),
mean_science = mean( science ),
n = n() )
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg )
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg )
dim( mpg )
str( mpg )
head( mpg )
dim( mpg )
dim( mpg )
str( mpg )
head( mpg )
install.packages("ggplot2")
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg )
dim( mpg )
str( mpg )
head( mpg )
View( mpg )
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
install.packages("dplyr")
install.packages("ggplot2")
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
library(dplyr)
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'suv' ) %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot) ) %>%
head(5)
mpg %>%
group_by( manufacturer, drv ) %>%
summarise( mean_cty = mean( cty ) ) %>%
head( 10 )
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'suv' ) %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot) ) %>%
head(5)
source('D:/Rclass/fifth.R', encoding = 'UTF-8', echo=TRUE)
mpg %>%
group_by( manufacturer ) %>%
filter( class == "suv" ) %>%
mutate( tot = ( cty + hwy )/2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot ) ) %>%
head(5)
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'suv' ) %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot) ) %>%
head(5)
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'suv' ) %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot) ) %>%
head(5)
mpg %>%
group_by( manufacturer, drv ) %>%
summarise( mean_cty = mean( cty ) ) %>%
head( 10 )
df1 <- data.frame( id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85) )
df2 <- data.frame( id = c(1, 2, 3, 4, 5),
final = c(60, 80, 70, 90, 85) )
total <- left_join( df1, df2, by="id" )
total
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
total1 <- inner_join( df1, df2, by = "id" )
total1
df1 <- data.frame( id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85) )
df2 <- data.frame( id = c(1, 2, 3, 4, 5),
final = c(60, 80, 70, 90, 85) )
total <- left_join( df1, df2, by="id" )
total
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
total1 <- inner_join( df1, df2, by = "id" )
total1
df1
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
total1 <- left_join( df1, df2, by = "id" )
total1
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
total1 <- inner_join( df1, df2, by = "id" )
total1
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
total1 <- full_join( df1, df2, by = "id" )
total1
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주", stringsFactors = F ) )
df1
str(df1)
df_left <- left_join( df1, df2, by='id' )
df_left
df_inner <- inner_join( df1, df2, by='id' )
df_inner
df_full <- full_join( df1, df2, by='id' )
df_full
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringFactors = F )
df1
df1 <- data.frame( id = c(1,2,3),
address = c("서울", "부산","제주"),
stringsAsFactors = F )
df2 <- data.frame( id = c(1,2,4),
gender = c("남","여","남") )
df_left <- left_join( df1, df2, by='id' )
df_left
class(df1)
str(df1)
df1 <- data.frame( id = c(1,2,3,4,5),
test = c(60, 80, 70, 90, 85),
stringsAsFactors = F )
df2 <- data.frame( id = c(1,2,4),
test = c(60, 80, 70, 90, 85) )
df_all <- bind_rows(df1, df2)
df_all
df1 <- data.frame( id = c(1,2,3,4,5),
test = c(60, 80, 70, 90, 85))
df2 <- data.frame( id = c(1,2,3,4,5),
test = c(60, 80, 70, 90, 85) )
df_all <- bind_rows(df1, df2)
df_all
install.packages("psych")
library(psych)
summary(mtcars)
describe(mtcars)
install.packages("descr")
require(descr)
df <- data.frame( id = c( 1, 2, 4 ),
gender = c("남", "여", "남"))
table(df$gender)
freq(df$gender)
freq(df$gender, plot=F)
freq(df$gender, plot=F)
freq(df$gender)
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
별로 결측값이 몇 개인지 출력하시오.
na_count <- apply( ds, 2, function(y) sum(is.na(y)))
na_count
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
sum(is.na(ds) > 0)
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rows(is.na(ds))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
row(is.na(ds))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
row(is.na(ds) > 0 )
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
row(is.na(ds) > 0 )
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds))
str(state.x77)
head(state.x77)
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum(is.na(ds) > 0)
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds))
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds)) > 0
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds)) > 0
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
ds[rowSums(is.na(ds)) > 0,]
측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
ds.new <- ds[ complete.cases( ds ), ]
ds.new
nrows(ds.new)
nrow(ds.new)
nrow(ds)
st <- data.frame(state.x77)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot(st)
boxplot.stats(st)$out
boxplot.stat(st)
boxplot.stats(st)
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
colnames(st)
boxplot(st$Population)
boxplot(st$Income)
boxplot(st$Illiteracy)
boxplot(st$Life.Exp)
boxplot(st$Murder)
boxplot(st$HS.Grad)
boxplot(st$Frost)
boxplot(st$Area)
boxplot(st$Area)
boxplot(st)
boxplot(st$Income)
boxplot(st$Income)
boxplot.stats(st)
boxplot.stats(st,)
boxplot.stats(st$Population)
boxplot.stats(st$Population)$out
boxplot.stats(st$Population)$out
boxplot.stats(st$Income)$out
boxplot.stats(st$Illiteracy)$out
boxplot.stats(st$Life.Exp)$out
boxplot.stats(st$Murder)$out
boxplot.stats(st$HS.Grad)$out
boxplot.stats(st$Frost)$out
boxplot.stats(st$Area)$out
boxplot(st)
boxplot(st$Population)
boxplot(st$Income)
boxplot(st$Illiteracy)
boxplot(st$Life.Exp)
boxplot(st$Murder)
boxplot(st$HS.Grad)
boxplot(st$Frost)
boxplot(st$Area)
boxplot.stats(st$Population)$out
boxplot.stats(st$Income)$out
boxplot.stats(st$Area)$out
out.val3 <- boxplot.stats(st$Area)$out
st$Area[ st$Area %in% out.val3 ] <- NA
out.val1 <- boxplot.stats(st$Population)$out
st$Population[ st$Population %in% out.val1 ] <- NA
out.val2 <- boxplot.stats(st$Income)$out
st$Income[ st$Income %in% out.val2 ] <- NA
boxplot.stats(st$Population)$out
boxplot.stats(st$Income)$out
boxplot.stats(st$Area)$out
out.val1 <- boxplot.stats(st$Population)$out
st$Population[ st$Population %in% out.val1 ] <- NA
out.val2 <- boxplot.stats(st$Income)$out
st$Income[ st$Income %in% out.val2 ] <- NA
out.val3 <- boxplot.stats(st$Area)$out
st$Area[ st$Area %in% out.val3 ] <- NA
boxplot.stats(st$Population)$out
boxplot.stats(st$Income)$out
boxplot.stats(st$Area)$out
st2
st2 <- st[ complete.cases( st ) , ]
st2
is.na(st2)
sum(is.na(st2))
AQ
AQ <- airquality
AQ
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
norw(AQ)
nrow(AQ)
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
apply(AQ, 2, function(y) sum(is.na(y)))
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[ complete.cases( AQ ) , ]
nrow(AQ)
AQ <- airquality
AQ
nrow(AQ)
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
apply(AQ, 2, function(y) sum(is.na(y)))
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[ complete.cases( AQ ) , ]
nrow(AQ[ complete.cases( AQ ) , ])
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
apply(AQ, 2, function(y) sum(is.na(y)))
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums(is.na(AQ))
AQ2 <-AQ
AQ2$Ozone[ is.na(AQ2$Ozone) ] <- mean(AQ2$Ozone)
AQ2$Solar.R[ is.na(AQ2$Solar.R) ] <- mean(AQ2$Solar.R)
AQ2
AQ2
AQ2$Ozone[ is.na(AQ2$Ozone) ]
AQ2$Ozone
is.na(AQ2$Ozone)
AQ2 <-AQ
AQ2$Ozone[ is.na(AQ2$Ozone) ] <- mean(AQ2$Ozone, na.rm=TRUE)
AQ2$Ozone
AQ2
is.na(AQ2)
sum(is.na(AQ2))
AQ2
sum(is.na(AQ2))
sum(is.na(AQ2))
AQ2 <-AQ
AQ2$Ozone[ is.na(AQ2$Ozone) ] <- mean(AQ2$Ozone, na.rm=TRUE)
AQ2$Solar.R[ is.na(AQ2$Solar.R) ] <- mean(AQ2$Solar.R, na.rm=TRUE)
AQ2
sum(is.na(AQ2))
df <- state.x77
df[ order(df$Population, decreasing = T ) ]
름차순 정렬하시오.
state.x77
state.x77[ order(state.x77$Population, decreasing = T ) ]
state.x77[ order(state.x77$Population, decreasing = T ),]
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
class(state.x77)
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
df <- data.frame(state.x77)
df[ order(df$Population, decreasing = T ) , ]
#(1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
df <- data.frame(state.x77)
df[ order(df$Population, decreasing = F ) , ]
#(2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
df[ order(df$Income, decreasing = T ) , ]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
df[ order(df$Illiteracy), decreasing = F) , ][10]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
df[ order(df$Illiteracy, decreasing = F) , ][10]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
df[ order(df$Illiteracy, decreasing = F) , ]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
df[ order(df$Illiteracy, decreasing = F) , ][1:10,]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
df[ order(df$Illiteracy, decreasing = F) , ][1:10,"Illiteracy"]
rownames(subset)
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
subset <- df[ order(df$Illiteracy, decreasing = F) , ][1:10,]
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
subset <- df[ order(df$Illiteracy, decreasing = F) , ][1:10,]
rownames(subset)
cat( rownames(subset), subset[,"Illiteracy"]
#문5) R에서 제공하는 mtcars 데이터셋에 대하여 다음 문제를 해결하기 위한 R 코드를 작성하시오.
(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하
시오.(단, split() 함수를 사용)
(2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
(3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서
mt.gear.35에 저장하고 내용을 출력하시오.
(4) mtcars 데이터셋에서 wt(중량)가 1.5~3.0 사이인 행들을 추출하여 출력하시오.
문6)
cat( rownames(subset), subset[,"Illiteracy"])
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
subset <- df[ order(df$Illiteracy, decreasing = F) , ][1:10,]
result <- subset[,"Illiteracy"]
names(result) <- rownames(subset)
result
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
str(mtcars)
mtcars$gear <- factor(mtcars$gear)
str(mtcars)
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
str(mtcars)
mtcars$gear <- factor(mtcars$gear)
str(mtcars)
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
mtcars
str(mtcars)
mtcars$gear <- as.numeric(mtcars$gear)
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
str(mtcars)
mtcars$gear <- factor(mtcars$gear)
str(mtcars)
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mtcars
mtcars
str(mtcars)
