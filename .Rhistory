print('hello world!')
print('hello world')
for( i in 1:1000 ) {
if ( i %% 3 == 0 ) {
print( i )
}
}
count <- 0
for( i in 1:1000 ) {
if ( i %% 3 == 0 ) {
cat( i )
}
}
for( i in 1:1000 ) {
if ( i %% 3 == 0 ) {
cat( i, " " )
}
}
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " )
} else if ( i %% 5 == 0 ) {
cat( i, " " )
}
}
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " )
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " )
count <- count + 1
}
cat(count)
}
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " )
#    count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " )
#    count <- count + 1
}
#  cat(count)
}
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1
}
} print(count)
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1
}
}
print( count )
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1
}
}
cat( count )
count <- 0
for( i in 1:1000 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1
}
}
cat( count )
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1
} if ( count %% 10 == 0 ) {
print('\n')
}
}
cat( count )
count <- 0
for( i in 1:100 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1;
if ( count %% 10 == 0 ) {
print('\n')
}
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1;
if ( count %% 10 == 0 ) {
print('\n')
}
}
}
cat( count )
count <- 0
for( i in 1:1000 ) {
if ( i %% 3 == 0 ) {
cat( i, " " );
count <- count + 1;
if ( count %% 10 == 0 ) {
print('\n')
}
} else if ( i %% 5 == 0 ) {
cat( i, " " );
count <- count + 1;
if ( count %% 10 == 0 ) {
print('\n')
}
}
}
cat( count )
i <- 1
count <- 0
linecount <- 1
multiple3 <- NULL #코드표현때문에 나오는 임시변수(처리변수)
multiple5 <- NULL #코드는 가능하면 분리하는 게 좋기 때문에
while ( i <= 1000 ) {
multiple3 <- i %% 3
multiple5 <- i %% 5
if ( multiple3 == 0 | multiple5 == 0 ) {
count <- count + 1
cat( i, " " )
linecount <- linecount + 1
if ( linecount > 10 ) {
linecount <- 1
print( '\n' )
}
}
i <- i + 1
}
print( '\n' )
cat( " 1~1000사이의 3의 배수와 5의 배수의 개수 : ", count, '\n' )
st <- as.data.frame(state.x77)
#2.2
st
#2.3
colnames(st)
#2.4
rownames(st)
#2.5
dim(st)
#2.6
str(st)
#2.7
apply( st, 1, sum )
apply( st, 1, mean )
rowSums( st )
rowMeans( st )
apply( st, 2, sum ) ; colSums( st )
apply( st, 2, sum ) == colSums( st )
#2.9
st[ "Florida" , ]
#2.10
st[ , "Income" ]
#2.11
st[ "Texas", "Area"]
#2.12
st[ "Ohio", c( "Population", "Income") ]
#2.13
subset( st, Population >= 5000 )
#2.14
subset( st, Income >= 4500 )[ , c("Population", "Income", "Area" ) ]
#2.14
subset( st, Income >= 4500 )[ , c("Population", "Income", "Area" ) ]
#2.15
nrow(subset( st, Income >= 4500 ))
dim(unique( subset( st, Income >= 4500 ) ) )[1]
#2.16
subset( st, ( Area >= 100000 & Frost >= 120 ) )
#2.17
subset( st, ( Population < 2000 & Murder < 12 ) )
subset( st, Illiteracy >= 2.0 )
subset( st, Illiteracy >= 2.0 )
#Data Frame 생성
city <- c( "Seoul" , "Tokyo", "Washington" )
rank <- c( 1, 3, 2 )
city.info <- data.frame( city, rank )
city.info
city.info[ city.info$city, ] #이거 쫌 헷갈...?
subset( st, Illiteracy >= 2.0 )$Income
subset( st, Illiteracy >= 2.0 )[,"Income"]
subset( st, Illiteracy >= 2.0 )[,Income]
#2.18
mean( subset( st, Illiteracy >= 2.0 )$Income )
mean( subset( st, Illiteracy >= 2.0 )[ , "Income" ])
high <- mean(subset( st, Illiteracy >= 2.0 )$Income)
low <- mean(subset( st, Illiteracy < 2.0 )$Income)
low - high
abs( mean ( subset( st, Illiteracy >= 2.0 )$Income ) - mean( subset( st, Illiteracy < 2.0 )$Income ) )
st[ , st$Illiteracy >= 2.0 ]
st[ st$Illiteracy >= 2.0, ]
mean( st[ st$Illiteracy >= 2.0, ])
mean( st[ st$Illiteracy >= 2.0, ]$Income )
mean( subset( st, Illiteracy >= 2.0 )[ , "Income" ]) #두번째
#2.20 기대수명이 가장 높은 주는 어디인지 출력 (띄어쓰기때문에 안되는건가...?)
st[order(-Income),] #이렇게 정렬이 되어서 첫번째 꺼를 출력하면 되나..?
#2.19 (2)
abs( mean ( subset( st, Illiteracy >= 2.0 )$Income ) - mean( subset( st, Illiteracy < 2.0 )$Income ) )
mean( st[ st$Illiteracy >= 2.0 ]$Income ) - mean( st[ st$Illiteracy < 2.0 ]$Income )
mean( st[ st$Illiteracy >= 2.0 ]$Income )
st[ st$Illiteracy >= 2.0 ]$Income
st[ st$Illiteracy >= 2.0, ]$Income
mean( st[ st$Illiteracy < 2.0, ]$Income )
mean( st[ st$Illiteracy >= 2.0, ]$Income )
abs( mean ( subset( st, Illiteracy >= 2.0 )$Income ) - mean( subset( st, Illiteracy < 2.0 )$Income ) )
mean( st[ st$Illiteracy < 2.0, ]$Income ) - mean( st[ st$Illiteracy >= 2.0, ]$Income )
high <- mean(subset( st, Illiteracy >= 2.0 )$Income)
low <- mean(subset( st, Illiteracy < 2.0 )$Income)
low - high
#2.21
rownames(subset( st, Income> st["Pennsylvania","Income"]))
st$Income > st[ "Pennsylvania", "Income" ]
st[ st$Income > st[ "Pennsylvania", "Income" ],]
st["Pennsylvania","Income"]
st[ st$Income > st[ "Pennsylvania", "Income" ],]
#2.21
rownames( subset( st, Income > st[ "Pennsylvania", "Income" ] ) )
rownames( st[ st$Income > st[ "Pennsylvania", "Income" ] , ] )
#문제3
#3.1
str(mtcars)
st$Life Exp
st$"Life Exp"
rownames(st$"Life Exp")
max(st$"Life Exp")
st[ st$"Life Exp" == max(st$"Life Exp"), ]
rownames(st[ st$"Life Exp" == max(st$"Life Exp"), ])
rownames(st [ st$"Life Exp" == max ( st$"Life Exp" ), ] )
st[ order ( st$"Life Exp" ), ]
st[ order ( st$"-Life Exp" ), ]
#2.20
rownames(st [ st$"Life Exp" == max ( st$"Life Exp" ), ] ) #첫번째
st[ order ( st$"Life Exp" ), ]
rownames( st[ order ( st$"Life Exp" ), ][50, ])
rownames( st [ order ( st$"Life Exp" ), ][ 50, ] )
row.names( st [ order ( st$"Life Exp" ), ][ 50, ] ) #두번째
row.names( st [ order ( st$-"Life Exp" ), ]1, ] ) #두번째
row.names( st [ order ( st, -Income ), ] ) [ 1 ] #두번째
row.names( st [ order (-st$"Life Exp" ), ] ) [ 1 ] #두번째
row.names( st [ order (-st$"Life Exp" ), ] ) [ 1 ] #세번째
row.names( st [ order ( st$"Life Exp" ), ][ 50, ] ) #두번째
#2.20
row.names( st [ st$"Life Exp" == max ( st$"Life Exp" ), ] ) #첫번째
#3.3 열들의 자료형 출력  mtcars.. 몰랑
colums.mtcars
#3.3 열들의 자료형 출력  mtcars.. 몰랑
colums(mtcars)
#3.3 열들의 자료형 출력  mtcars.. 몰랑
cols(mtcars)
#문제3
#3.1
str(mtcars)
#3.3 열들의 자료형 출력  mtcars.. 몰랑
mtcars[ 1, ]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
str(mtcars)[,1]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
str(mtcars)[,1]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
str(mtcars)[,2]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
str(mtcars)[1,]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
class(mtcars[ ,1 ]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
class(mtcars[ ,1 ])
#3.3 열들의 자료형 출력  mtcars.. 몰랑
class(mtcars[ 1,1 ])
#3.3 열들의 자료형 출력  mtcars.. 몰랑
col(mtcars)
rownames(mtcars[order(-mpg),])[1]
#3.4
attach(mtcars)
rownames(mtcars[order(-mpg),])[1]
mtcars[order(-mpg),]
mtcars[ , gear == 4 ]
mtcars[ gear == 4, ]
#3.5
mtcars4 <- subset( mtcars, gear == 4)
mtcars4
order( mtcars4, mpg )
mtcars4[ order( mpg )
mtcars4[ order( mpg ) ]
mtcars4[ order( mpg ), ]
#3.5
mtcars4 <- subset( mtcars, gear == 4)
mtcars4
mtcars4 [ min(mtcars4$mpg), ]
mtcars4$mpg
mtcars4 [ mtcars4$mpg == min(mtcars4$mpg), ]
mtcars4 [ mtcars4$mpg == min(mtcars4$mpg), ]
row.names( mtcars4 [ mtcars4$mpg == min(mtcars4$mpg), ] )
mtcars4[ order( mpg ), ]
mtcars4[ order( mtcars$mpg ), ]
mtcars4[ order( mtcars$mpg ), ]
mtcars4[ order( mtcars4$mpg ), ]
row.names( mtcars4[ order( mtcars4$mpg ), ][ 1 ] )
row.names( mtcars4[ order( mtcars4$mpg ), ])[ 1 ]
row.names( mtcars4[ order( mtcars4$mpg ), ] ) [ 1 ]
mtcars[ gear == 4, ]
mtcars[ gear == 4, ]
mtcars[ gear == 4, ][ order( mtcars $ mpg ), ]
#3.6
mtcars$"Honda Civic"
#3.6
row.names(mtcars) == "Honda Civic"
#3.6
mtcars [ row.names( mtcars ) == "Honda Civic", ]
#3.6
mtcars [ row.names( mtcars ) == "Honda Civic", c( "mpg", "gear" ) ]
mtcars [ row.names( mtcars ) == "Honda Civic",][ , c( "mpg", "gear" ) ]
#3.7
row.names( mtcars ) == "Pontiac Firebird"
#3.7
mtcars [row.names( mtcars ) == "Pontiac Firebird" , ]
#3.7
mtcars [row.names( mtcars ) == "Pontiac Firebird" , "mpg" ]
row.names( mtcars )
row.names( mtcars [ mtcars$mpg > pmpg ] )
#3.7
pmpg <- mtcars [row.names( mtcars ) == "Pontiac Firebird" , "mpg" ]
row.names( mtcars [ mtcars$mpg > pmpg ] )
row.names( mtcars [ mtcars$mpg > pmpg , ] )
mtcars [ mtcars$mpg > pmpg , ]
pmpg
#3.8
mean( mtcars$mpg )
mean( mtcars[ mpg, ] )
mean( mtcars[ "mpg", ] )
mtcars[ , "mpg" ]
mtcars[ "mpg", ]
mtcars[ , "mpg" ]
colsMean( mtcars )
colMeans( mtcars )
colMeans( mtcars )["mpg"]
#3.8
mean( mtcars$mpg )
mean( mtcars[ , "mpg" ] )
#3.9
mtcars$gear
#3.9
factor(mtcars$gear)
#3.9
num(factor(mtcars$gear))
unique( mtcars $ gear )
#3.9
factor(mtcars$gear)
levels(factor(mtcars$gear))
#문제4
#4.1
data()
str(airquality)
#문제4
#4.1
str( airquality )
#4.2
head( airquality )
#4.3
airquality( order, Temp )
#4.3
airquality( order, "Temp" )
#4.3
order( airquality, "Temp" )
#4.3
order( airquality, Temp )
#4.2
head( airquality )
#4.3
order( airquality, "Temp" )
#4.3
airquality[ order( airquality, "Temp" ), ]
#4.2
head( airquality )
#문제4
#4.1
str( airquality )
#4.3
max(airquality$Temp)
#4.3
airquality [ airquality $ Temp == max( airquality $ Temp ) , ]
airquality [ airquality $ Temp == max( airquality $ Temp ) , c( "Month", "Day" ) ]
airquality [ airquality $ Month == 6 , ]
airquality [ airquality $ Month == 6 , ]$Wind
max( airquality [ airquality $ Month == 6 , ]$Wind)
#4.4
max( airquality [ airquality $ Month == 6 , ] $ Wind )
#4.5
mean ( airquality [airquality $ Month == 7 , Temp ] )
#4.5
mean( airquality [airquality $ Month == 7 , Temp ] )
#4.5
mean( airquality [airquality $ Month == 7 , ]$ Temp ] )
#4.5
mean( airquality [airquality $ Month == 7 , ] $ Temp ] )
#4.5
airquality [airquality $ Month == 7 , ]
#4.5
mean( airquality [airquality $ Month == 7 , ] $ Temp )
#4.6
airquality $Ozone >= 100
#4.6
sum ( airquality $Ozone >= 100 )
#4.6
airquality $ Ozone >= 100
#4.6
airquality[ airquality $ Ozone >= 100 , ]
#4.6
airquality$Ozone
#4.6
airquality
#4.6
airquality$Ozone >= 100
#4.6
airquality [ airquality$Ozone >= 100 , ]
#4.6
length( airquality [ airquality$Ozone >= 100 , ], na.rm = T )
#4.6
count( airquality [ airquality$Ozone >= 100 , ], na.rm = T )
#4.6
na.omit( airquality [ airquality$Ozone >= 100 , ])
#4.6
length( na.omit( airquality [ airquality$Ozone >= 100 , ]) )
#4.6
length( na.omit( airquality [ airquality$Ozone >= 100 , ] ) )
#문제5
#5.1
str(state.x77)
head(state.x77)
state.x77 [ state.x77$Income >= 5000 , ]
#문제5
#5.1
str(state.x77)
class(state.x77)
df.state.x77 <- as.data.frame(state.x77)
df.state.x77
class(df.state.x77)
df[ df$Income >= 5000 , ]
df <- as.data.frame(state.x77)
df
df[ df$Income >= 5000 , ]
df[ df$Income >= 5000 , ][ c( "Income" , "Population", "Area" ) ]
df <- as.data.frame(state.x77)
df
df2 <- df[ df$Income >= 5000 , ][ c( "Income" , "Population", "Area" ) ]
setwd("/Users/jeong-kyujin/Documents/GitHub/Rclass")
write.csv( df2, "rich_state.csv", row.names = F )
setwd("/Users/jeong-kyujin/Documents/GitHub/Rclass")
ds <- read.csv( df2, "rich_state.csv", header = T )
ds
ds <- read.csv("rich_state.csv", header = T )
ds
df2
#3.3 열들의 자료형 출력  mtcars.. 몰랑
mtcars.columns
#3.3 열들의 자료형 출력  mtcars.. 몰랑
mtcars.column
#3.3 열들의 자료형 출력  mtcars.. 몰랑
columns.mtcars
#3.3 열들의 자료형 출력  mtcars.. 몰랑
columns.mtcars
#3.3 열들의 자료형 출력  mtcars.. 몰랑
col.mtcars
#3.3 열들의 자료형 출력  mtcars.. 몰랑
col.types(mtcars)
#3.3 열들의 자료형 출력  mtcars.. 몰랑
col.class(mtcars)
#3.3 열들의 자료형 출력  mtcars.. 몰랑
colnames(mtcars)
#3.3 열들의 자료형 출력  mtcars.. 몰랑
mtcars[ colnames(mtcars), ]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
mtcars[ , colnames(mtcars) ]
#3.3 열들의 자료형 출력  mtcars.. 몰랑
class(mtcars[ , colnames(mtcars) ])
#문제3
#3.1
str(mtcars)
